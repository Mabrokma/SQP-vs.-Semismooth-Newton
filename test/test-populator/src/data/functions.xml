<functions>

	<function>
		<name>quad_func</name>
		<var>x</var>
		<constant>
			<constant_name>Q</constant_name>
			<constant_value>[1 0; 0 1]</constant_value>
		</constant>
		<constant>
			<constant_name>q</constant_name>
			<constant_value>[0; 0]</constant_value>
		</constant>
		<constant>
			<constant_name>c</constant_name>
			<constant_value>0</constant_value>
		</constant>
		<def>y = 0.5*x'*Q*x + q'*x + c;</def>
		<latex_def>\tfrac{1}{2} x^T Q x + q^T x + c</latex_def>
		<grad>g = Q*x + q;</grad>
		<hess>H = Q;</hess>
	</function>

	<function>
		<name>norm_func</name>
		<var>x</var>
		<constant>
			<constant_name>xd</constant_name>
			<constant_value>3</constant_value>
		</constant>
		<def>y = norm(x-xd)^2;</def>
		<latex_def>\| x-x_d \|^2</latex_def>
		<grad>g = 2*(x-xd);</grad>
		<hess>H = 2*eye(length(x));</hess>
	</function>

	<function>
		<name>linear_func</name>
		<var>x</var>
		<constant>
			<constant_name>c</constant_name>
			<constant_value>[1;1]</constant_value>
		</constant>
		<def>y = c'*x;</def>
		<grad>g = c;</grad>
		<hess>H = zeros(length(c));</hess>
	</function>
	
	<function>
		<name>exp_func</name>
		<var>x</var>
		<def>y = exp(norm(x)^2);</def>
		<latex_def>e^{\|x\|^2}</latex_def>
		<grad>g = 2*exp(norm(x)^2)*x;</grad>
		<hess>
	n = length(x);
	efx = exp(norm(x)^2);
	H = 2*efx*eye(n);
	for k=1:n
		for l=1:n
			H(k,l) = H(k,l) + 4*efx*x(k)*x(l);
		end
	end
		</hess>
	</function>

	<function>
		<name>rosenbrock_func</name>
		<var>x</var>
		<def>y = 100*(x(2)-x(1)^2)^2+(1-x(1))^2;</def>
		<grad>g = [-400*x(1)*(x(2)-x(1)^2)-2*(1-x(1)); 200*(x(2)-x(1)^2)];</grad>
		<hess>
	H = [ 1200*x(1)^2-400*x(2)+2  -400*x(1);
              -400*x(1)              200  ];
        </hess>
	</function>

	<function>
		<name>himmelblau_func</name>
		<var>x</var>
		<def>y = (x(1)^2+x(2)-11)^2 + (x(1)+x(2)^2-7)^2;</def>
		<grad>
	g = [ 4*x(1)*(x(1)^2+x(2)-11) + 2*(x(1)+x(2)^2-7);
		  2*(x(1)^2+x(2)-11) + 4*x(2)*(x(1)+x(2)^2-7) ];
		</grad>
		<hess>
	H = [ 12*x(1)^2+4*x(2)-42    4*(x(1)+x(2));
             4*(x(1)+x(2))    4*x(1)+12*x(2)^2-26  ];
        </hess>
	</function>
	
	<function>
		<name>bazaraa_shetty_func</name>
		<var>x</var>
		<def>y = (x(1)-2)^4+(x(1)-2*x(2))^2;</def>
		<grad>
	g = [ 4*(x(1)-2)^3+2*x(1)-4*x(2);
	         -4*x(1)+8*x(2) ];
		</grad>
		<hess>
	H = [ 12*(x(1)-2)^2+2  -4;
               -4           8 ];
        </hess>
	</function>

	<function>
		<name>beale_func</name>
		<var>x</var>
		<def>
	y = (1.5-x(1)*(1-x(2)))^2+(2.25-x(1)*(1-x(2)^2))^2+(2.625-x(1)*(1-x(2)^3))^2;
		</def>
	</function>
	
	<function>
		<name>betts_box_func</name>
		<var>x</var>
		<def>y = ( 1 / ( 27 * sqrt(3) ) ) * ( (x(1)-3)^2 - 9 ) * x(2)^3;</def>
	</function>
	
	<function>
		<name>huang_aggerwal_func</name>
		<var>x</var>
		<def>y = (x(1)-x(2))^2 + (x(3)-1)^2 + (x(4)-1)^2 + (x(5)-1)^6;</def>
	</function>
	
	<function>
		<name>huang_aggerwal_1_func</name>
		<var>x</var>
		<def>y = (x(1)-x(2))^2 + (x(2)-x(3))^2 + (x(3)-x(4))^4 + (x(4)-x(5))^2;</def>
	</function>
	
	<function>
		<name>hsia_func</name>
		<var>x</var>
		<def>y = x(1) + 2*x(2) + 4*x(5) + exp(x(1)*x(4));</def>
	</function>

	<function>
		<name>schuldt_func</name>
		<var>x</var>
		<def>y = x(2)+(1/100000)*(x(2)-x(1)^2)^2;</def>
		<grad>
	g = [ -(4/100000)*x(1)*(x(2)-x(1)^2);
	      1 + (2/100000)*(x(2)-x(1)^2) ];
		</grad>
		<hess>
	H = [ -(4/100000)*x(2)+(12/100000)*x(1)^2  -(4/100000)*x(1);
               -(4/10000)*x(1)                   (2/100000) ];
		</hess>
	</function>

	<function>
		<name>asaadi_func</name>
		<var>x</var>
		<def>y = x(2)+(1/3)*(x(1)+1)^3;</def>
		<grad>
	g = [ (x(1)+1)^2;
	           1  ];
		</grad>
		<hess>
	H = [ 2*(x(1)+1)  0;
               0      0 ];
		</hess>
	</function>

	<function>
		<name>mccormick_func</name>
		<var>x</var>
		<def>y = sin(x(1)+x(2)) + (x(1)-x(2))^2 - 1.5*x(1) + 2.5*x(2) + 1;</def>
	</function>

	<function>
		<name>dixon_2_dim_func</name>
		<var>x</var>
		<def>y = (1-x(1))^2+(x(1)^2-x(2))^2+(1-x(2))^2;</def>
		<grad>
	g = [ -2*(1-x(1)) + 4*x(1)*(x(1)^2-x(2));
	         -2*(x(1)^2-x(2)) - 2*(1-x(2)) ];
		</grad>
		<hess>
	H = [ 2+12*x(1)^2-4*x(2)  -4*x(1);
               -4*x(1)           4   ];
        </hess>
	</function>

	<function>
		<name>dixon_3_dim_func</name>
		<var>x</var>
		<def>y = (1-x(1))^2+(x(1)^2-x(2))^2+(x(2)^2-x(3))^2+(1-x(3))^2;</def>
		<grad>
	g = [ -2*(1-x(1)) + 4*x(1)*(x(1)^2-x(2));
          -2*(x(1)^2-x(2)) + 4*x(2)*(x(2)^2-x(3));
	         -2*(x(2)^2-x(3)) - 2*(1-x(3)) ];
		</grad>
		<hess>
	H = [ 2+12*x(1)^2    -4*x(1)       0;
             -4*x(1)   2+12*x(2)^2  -4*x(2);
               0         -4*x(2)       4 ];
        </hess>
	</function>

	<function>
		<name>dixon_func</name>
		<var>x</var>
		<constant>
			<constant_name>n</constant_name>
			<constant_value>10</constant_value>
		</constant>
		<def>
	y = (1-x(1))^2;
	for k=1:(n-1)
		y = y + (x(k)^2-x(k+1))^2;
	end
	y = y + (1-x(n))^2;
		</def>
		<grad>
	g(1,1) = -2*(1-x(1)) + 4*x(1)*(x(1)^2-x(2));
    for k=2:(n-1)
		g(k,1) = -2*(x(k-1)^2-x(k)) + 4*x(k)*(x(k)^2-x(k+1));
	end
	g(n,1) = -2*(x(n-1)^2-x(n)) - 2*(1-x(n));
		</grad>
		<hess>
	for k=1:n
		for l=1:n
			H(k,l) = 0;
			if (l == k-1)
				H(k,l) = -4*x(k-1);
			end
			if (l == k)
				H(k,l) = 2+12*x(k)^2;
			end
			if (l == k+1)
				H(k,l) = -4*x(k);
			end
		end
	end
	H(n,n) = 4;
        </hess>
	</function>

	<function>
		<name>colville_func</name>
		<var>x</var>
		<def>y = 100*(x(2)-x(1)^2)^2 + (1-x(1))^2 + 90*(x(4)-x(3)^2)^2 + (1-x(3))^2 + 10.1*((x(2)-1)^2 + (x(4)-1)^2) + 19.8*(x(2)-1)*(x(4)-1);</def>
	</function>

	<function>
		<name>betts_func</name>
		<var>x</var>
		<def>y = 2 - (1/2)*x(1)*x(2);</def>
		<grad>
	g = [ -0.5*x(2);
	      -0.5*x(1) ];
		</grad>
		<hess>
	H = [   0   -0.5;
		  -0.5    0 ];
		</hess>
	</function>
	
	<function>
		<name>paviani_func</name>
		<var>x</var>
		<def>
	y = 0;
	for k=1:2
		y = y - ( (log(x(k)-2))^2 + (log(10-x(k)))^2 );
	end
		</def>
	</function>

	<function>
		<name>lin_regression_func</name>
		<var>x</var>
		<constant>
			<constant_name>xi</constant_name>
			<constant_value>[1:1:10]'</constant_value>
		</constant>
		<constant>
			<constant_name>eta</constant_name>
			<constant_value>[-8; -7; -6; -5; -2; 1; 5; 12; 17; 25]</constant_value>
		</constant>
		<def>
	y = 0;
	m = length(xi);
	for k=1:m
		y = y + ( x(1)*xi(k) + x(2) - eta(k) )^2;
	end
		</def>
	</function>

	<function>
		<name>quad_regression_func</name>
		<var>x</var>
		<constant>
			<constant_name>xi</constant_name>
			<constant_value>[1:1:10]'</constant_value>
		</constant>
		<constant>
			<constant_name>eta</constant_name>
			<constant_value>[-8; -7; -6; -5; -2; 1; 5; 12; 17; 25]</constant_value>
		</constant>
		<def>
	y = 0;
	m = length(xi);
	for k=1:m
		y = y + ( x(1)*(xi(k) - x(2))^2 + x(3) - eta(k) )^2;
	end
		</def>
	</function>

	<function>
		<name>nichtlin_regression_func</name>
		<var>x</var>
		<constant>
			<constant_name>xi</constant_name>
			<constant_value>[1:1:10]'</constant_value>
		</constant>
		<constant>
			<constant_name>eta</constant_name>
			<constant_value>[1; 1.1; 1.2; 1.35; 1.55; 1.75; 2.5; 3; 3.7; 4.5]</constant_value>
		</constant>
		<constant>
			<constant_name>m</constant_name>
			<constant_value>length(xi)</constant_value>
		</constant>
		<def>
	y = 0;
	for k=1:m
		y = y + ( x(1)*exp(xi(k)*x(2)) - eta(k) )^2;
	end
		</def>
		<grad>
	g = zeros(2,1);
   	for k=1:m
		g(1) = g(1) + 2*exp(xi(k)*x(2)) * ( x(1)*exp(xi(k)*x(2)) - eta(k) );
	end
   	for k=1:m
		g(2) = g(2) + 2*xi(k)*x(1)*exp(xi(k)*x(2)) * ( x(1)*exp(xi(k)*x(2)) - eta(k) );
	end
		</grad>
		<hess>
	H = zeros(2,2);
	for k=1:m
		H(1,1) = H(1,1) + 2*exp(2*xi(k)*x(2));
	end
	for k=1:m
		H(1,2) = H(1,2) + 4*xi(k)*x(1)*exp(2*xi(k)*x(2)) - 2*xi(k)*eta(k)*exp(xi(k)*x(2));
	end
	H(2,1) = H(1,2);
	for k=1:m
		H(2,2) = H(2,2) + 4*xi(k)^2*x(1)^2*exp(2*xi(k)*x(2)) - 2*xi(k)^2*eta(k)*x(1)*exp(xi(k)*x(2));
	end
        </hess>
	</function>

	<function>
		<name>nichtlin_regression_3_vars_func</name>
		<var>x</var>
		<constant>
			<constant_name>xi</constant_name>
			<constant_value>[1:1:10]'</constant_value>
		</constant>
		<constant>
			<constant_name>eta</constant_name>
			<constant_value>[-8; -7; -6; -5; -2; 1; 5; 12; 17; 25]</constant_value>
		</constant>
		<constant>
			<constant_name>m</constant_name>
			<constant_value>length(xi)</constant_value>
		</constant>
		<def>
	y = 0;
	for k=1:m
		y = y + ( x(1)*exp(xi(k)*x(2)) + x(3) - eta(k) )^2;
	end
		</def>
		<grad>
	g = zeros(3,1);
   	for k=1:m
		g(1) = g(1) + 2*exp(xi(k)*x(2)) * ( x(1)*exp(xi(k)*x(2)) + x(3) - eta(k) );
	end
   	for k=1:m
		g(2) = g(2) + 2*xi(k)*x(1)*exp(xi(k)*x(2)) * ( x(1)*exp(xi(k)*x(2)) + x(3) - eta(k) );
	end
   	for k=1:m
		g(3) = g(3) + 2 * ( x(1)*exp(xi(k)*x(2)) + x(3) - eta(k) );
	end
		</grad>
		<hess>
	H = zeros(3,3);
	for k=1:m
		H(1,1) = H(1,1) + 2*exp(2*xi(k)*x(2));
	end
	for k=1:m
		H(1,2) = H(1,2) + 4*xi(k)*x(1)*exp(2*xi(k)*x(2)) + 2*xi(k)*(x(3)-eta(k))*exp(xi(k)*x(2));
	end
	H(2,1) = H(1,2);
	for k=1:m
		H(2,2) = H(2,2) + 4*xi(k)^2*x(1)^2*exp(2*xi(k)*x(2)) + 2*xi(k)^2*(x(3)-eta(k))*x(1)*exp(xi(k)*x(2));
	end
	for k=1:m
		H(1,3) = H(1,3) + 2*exp(xi(k)*x(2));
	end
	H(3,1) = H(1,3);
	for k=1:m
		H(2,3) = H(2,3) + 2*xi(k)*x(1)*exp(xi(k)*x(2));
	end
	H(3,2) = H(2,3);
	H(3,3) = 2;
        </hess>
	</function>
	
</functions>