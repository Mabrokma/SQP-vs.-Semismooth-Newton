<problems>

	<problem>
		<function_name>quad_func</function_name>
		<constant>
			<constant_name>xd</constant_name>
			<constant_value>4</constant_value>
		</constant>
		<lambda>4</lambda>
		<a>3</a>
		<b>10</b>
		<x0>8</x0>
		<tolerance>0.001</tolerance>
		<max_iteration>100</max_iteration>
	</problem>

    <problem>
        <function_name>quad_func</function_name>
        <constant>
            <constant_name>xd</constant_name>
            <constant_value>[4; 7]</constant_value>
        </constant>
        <lambda>1</lambda>
        <a>[-3; -6]</a>
        <b>[10; 20]</b>
        <x0>[8; 17]</x0>
        <tolerance>0.001</tolerance>
        <max_iteration>100</max_iteration>
    </problem>

	<problem>
		<function_name>quad_func</function_name>
		<constant>
			<constant_name>xd</constant_name>
			<constant_value>[4; 7]</constant_value>
		</constant>
		<lambda>1</lambda>
		<a>[3; 6]</a>
		<b>[10; 20]</b>
		<x0>[8; 17]</x0>
		<tolerance>0.001</tolerance>
		<max_iteration>100</max_iteration>
	</problem>

    <problem>
        <function_name>quad_func</function_name>
        <constant>
            <constant_name>xd</constant_name>
            <constant_value>[4; 7; 10]</constant_value>
        </constant>
        <lambda>1</lambda>
        <a>[3; 6; 2]</a>
        <b>[10; 20; 9]</b>
        <x0>[8; 17; 4]</x0>
        <tolerance>0.001</tolerance>
        <max_iteration>100</max_iteration>
    </problem>

    <problem>
        <function_name>exp_func</function_name>
        <lambda>1</lambda>
        <a>[-10; -2; -4]</a>
        <b>[10; 20; 4]</b>
        <x0>[5; 2; 4]</x0>
        <tolerance>0.001</tolerance>
        <max_iteration>500</max_iteration>
    </problem>

    <problem>
        <function_name>exp_func</function_name>
        <lambda>1</lambda>
        <a>[1; 0.5; 1]</a>
        <b>[10; 20; 4]</b>
        <x0>[5; 2; 4]</x0>
        <tolerance>0.001</tolerance>
        <max_iteration>500</max_iteration>
    </problem>

	<problem>
		<function_name>rosenbrock_func</function_name>
		<lambda>0.001</lambda>
		<a>[-10; -10]</a>
		<b>[10; 10]</b>
		<x0>[-1; 2]</x0>
		<tolerance>0.0000001</tolerance>
		<max_iteration>100</max_iteration>
	</problem>

	<problem>
		<function_name>rosenbrock_func</function_name>
		<lambda>0.001</lambda>
		<a>[-10; 1.5]</a>
		<b>[10; 10]</b>
		<x0>[-1; 2]</x0>
		<tolerance>0.000001</tolerance>
		<max_iteration>100</max_iteration>
	</problem>

	<problem>
		<function_name>himmelblau_func</function_name>
		<lambda>0.001</lambda>
		<a>[-20; -20]</a>
		<b>[20; 20]</b>
		<x0>[5; 5]</x0>
		<tolerance>0.0001</tolerance>
		<max_iteration>200</max_iteration>
	</problem>

    <problem>
        <function_name>himmelblau_func</function_name>
        <lambda>0.01</lambda>
        <a>[5; 5]</a>
        <b>[20; 20]</b>
        <x0>[15; 15]</x0>
        <tolerance>0.0001</tolerance>
        <max_iteration>100</max_iteration>
    </problem>
	
	<problem>
		<function_name>bazaraa_shetty_func</function_name>
		<lambda>0.0001</lambda>
		<a>[-20; -20]</a>
		<b>[20; 20]</b>
		<x0>[5; 5]</x0>
		<tolerance>0.0001</tolerance>
		<max_iteration>200</max_iteration>
	</problem>
	
	<problem>
		<function_name>schuldt_func</function_name>
		<lambda>0.0001</lambda>
		<a>[-20; 0]</a>
		<b>[20; 20]</b>
		<x0>[10; 1]</x0>
		<tolerance>0.0001</tolerance>
		<max_iteration>100</max_iteration>
	</problem>
	
	<problem>
		<function_name>asaadi_func</function_name>
		<lambda>0.0001</lambda>
		<a>[1; 0]</a>
		<b>[20; 20]</b>
		<x0>[1.125; 0.125]</x0>
		<tolerance>0.0001</tolerance>
		<max_iteration>100</max_iteration>
	</problem>
	
	<problem>
		<function_name>mccormick_func</function_name>
		<lambda>0.00001</lambda>
		<a>[-1.5; -3]</a>
		<b>[4; 3]</b>
		<x0>[0; -0.75]</x0>
		<tolerance>0.0001</tolerance>
		<max_iteration>200</max_iteration>
	</problem>

	<problem>
		<function_name>dixon_2_dim_func</function_name>
		<lambda>0.0001</lambda>
		<a>[-10; -10]</a>
		<b>[10; 10]</b>
		<x0>[1.5; 1.5]</x0>
		<tolerance>0.001</tolerance>
		<max_iteration>500</max_iteration>
	</problem>
	
	<problem>
		<function_name>dixon_2_dim_func</function_name>
		<lambda>0.001</lambda>
		<a>[-10; -10]</a>
		<b>[2; -5]</b>
		<x0>[-6; -7]</x0>
		<tolerance>0.001</tolerance>
		<max_iteration>500</max_iteration>
	</problem>

	<problem>
		<function_name>dixon_3_dim_func</function_name>
		<lambda>0.0001</lambda>
		<a>[-10; -10; -10]</a>
		<b>[10; 10; 10]</b>
		<x0>[1.5; 1.5; 1.5]</x0>
		<tolerance>0.001</tolerance>
		<max_iteration>500</max_iteration>
	</problem>

	<problem>
		<function_name>dixon_func</function_name>
		<lambda>0.0001</lambda>
		<a>[-10; -10; -10; -10; -10; -10; -10; -10; -10; -10]</a>
		<b>[10; 10; 10; 10; 10; 10; 10; 10; 10; 10]</b>
		<x0>[10; 10; 10; 10; 10; 10; 10; 10; 10; 10]</x0>
		<tolerance>0.001</tolerance>
		<max_iteration>500</max_iteration>
	</problem>

	<problem>
		<function_name>dixon_func</function_name>
		<lambda>0.001</lambda>
		<a>[2; -10; -10; -10; -10; -10; -10; -10; -10; -10]</a>
		<b>[10; 10; 10; 10; 10; 10; 10; 10; 10; 10]</b>
		<x0>[10; 10; 10; 10; 10; 10; 10; 10; 10; 10]</x0>
		<tolerance>0.001</tolerance>
		<max_iteration>500</max_iteration>
	</problem>
	
	<problem>
		<function_name>dixon_func</function_name>
		<lambda>0.001</lambda>
		<a>[3; 3; 3; 3; 3; 2; 2; 2; 2; 2]</a>
		<b>[10; 10; 10; 10; 10; 10; 10; 10; 10; 10]</b>
		<x0>[10; 10; 10; 10; 10; 10; 10; 10; 10; 10]</x0>
		<tolerance>0.001</tolerance>
		<max_iteration>500</max_iteration>
	</problem>

	<problem>
		<function_name>dixon_func</function_name>
		<lambda>0.01</lambda>
		<a>[-10; -10; -10; -10; -10; -10; -10; -10; -10; -10]</a>
		<b>[-5; -5; -5; -5; -5; -5; -5; -5; -5; -5]</b>
		<x0>[-10; -10; -10; -10; -10; -10; -10; -10; -10; -10]</x0>
		<tolerance>0.001</tolerance>
		<max_iteration>500</max_iteration>
	</problem>
	
	<problem>
		<function_name>dixon_func</function_name>
        <constant>
            <constant_name>n</constant_name>
            <constant_value>5</constant_value>
        </constant>
		<lambda>0.001</lambda>
		<a>[3; -3; 5; 3; 2]</a>
		<b>[7; 0; 5; 10; 14]</b>
		<x0>[4; -1; 5; 4; 7]</x0>
		<tolerance>0.001</tolerance>
		<max_iteration>500</max_iteration>
	</problem>

	<!--problem>
		<function_name>dixon_func</function_name>
        <constant>
            <constant_name>n</constant_name>
            <constant_value>20</constant_value>
        </constant>
		<lambda>0.001</lambda>
		<a>[-10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10]</a>
		<b>[10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10]</b>
		<x0>[10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10]</x0>
		<tolerance>0.001</tolerance>
		<max_iteration>500</max_iteration>
	</problem>

	<problem>
		<function_name>dixon_func</function_name>
        <constant>
            <constant_name>n</constant_name>
            <constant_value>20</constant_value>
        </constant>
		<lambda>0.001</lambda>
		<a>[-10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10]</a>
		<b>[-5; -5; -5; -5; -5; -5; -5; -5; -5; -5; -5; -5; -5; -5; -5; -5; -5; -5; -5; -5 ]</b>
		<x0>[-10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10; -10]</x0>
		<tolerance>0.001</tolerance>
		<max_iteration>500</max_iteration>
	</problem>

	<problem>
		<function_name>dixon_func</function_name>
        <constant>
            <constant_name>n</constant_name>
            <constant_value>40</constant_value>
        </constant>
		<lambda>0.001</lambda>
		<a>[2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2; 2]</a>
		<b>[10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10]</b>
		<x0>[10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10; 10]</x0>
		<tolerance>0.001</tolerance>
		<max_iteration>500</max_iteration>
	</problem-->

</problems>